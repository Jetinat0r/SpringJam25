#ifndef __JET_PALETTE_SWAPPER__
#define __JET_PALETTE_SWAPPER__

#include "UnityCG.cginc"

/*
//CUSTOM PALETTE SWAPPER VARS
uniform Texture2D _paletteImage;
SamplerState sampler_paletteImage;
uniform float4 _paletteImageTexelSize;
uniform float _curPaletteIndex;
uniform float _nextPaletteIndex;
uniform float _paletteCondenseAmount;
uniform float _paletteMixAmount;
*/

//Taken from Unity autogenerated shader graph code
float3 Unity_ColorspaceConversion_Linear_RGB_float(float3 In)
{
    float3 sRGBLo = In * 12.92;
    float3 sRGBHi = (pow(max(abs(In), 1.192092896e-07), float3(1.0 / 2.4, 1.0 / 2.4, 1.0 / 2.4)) * 1.055) - 0.055;
    return float3(In <= 0.0031308) ? sRGBLo : sRGBHi;
}

//Taken from Unity autogenerated shader graph code
float3 Unity_ColorspaceConversion_RGB_Linear_float(float3 In)
{
    float3 linearRGBLo = In / 12.92;
    float3 linearRGBHi = pow(max(abs((In + 0.055) / 1.055), 1.192092896e-07), float3(2.4, 2.4, 2.4));
    return float3(In <= 0.04045) ? linearRGBLo : linearRGBHi;
}

fixed4 SwapPalette(fixed4 _inColor, Texture2D _paletteImage, SamplerState _paletteSampler, float4 _paletteImageDimensions, float _curPaletteIndex, float _nextPaletteIndex, float _paletteCondenseAmount, float _paletteMixAmount)
{
    _curPaletteIndex = (_curPaletteIndex + 0.5) * _paletteImageDimensions.y;
    _nextPaletteIndex = (_nextPaletteIndex + 0.5) * _paletteImageDimensions.y;
    
    //float r = Unity_ColorspaceConversion_Linear_RGB_float(_inColor.rgb).r;
    float r = _inColor.r;
    
    float _paletteX = step(45. / 255., r) + step(128. / 255., r) + step(150. / 255., r);
    
    //Condense by decreasing by 1 each condenseAmount
    float _newX = (_paletteX - _paletteCondenseAmount) / 3.;
    //Condense by decreasing only the rightmost value each condenseAmount
    //  Looks bad, keeping bc I made it and don't want to lose work
    //float _newX = min(3. - paletteCondenseAmount, _paletteX) / 3.;

    fixed4 _startColor = _paletteImage.Sample(_paletteSampler, float2(_newX, _curPaletteIndex));
    fixed4 _endColor = _paletteImage.Sample(_paletteSampler, float2(_newX, _nextPaletteIndex));

    return fixed4(lerp(_startColor, _endColor, _paletteMixAmount).rgb, _inColor.a);
}

#endif